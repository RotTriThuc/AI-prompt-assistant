/**
 * AI Prompt Assistant - Advanced JavaScript Logic
 * T·∫°o b·ªüi Claude Sonnet 4 v·ªõi kh·∫£ nƒÉng suy nghƒ© nh∆∞ Claude 4.1 Opus
 * Ch·ª©c nƒÉng: M·ªü r·ªông c√¢u h·ªèi ƒë∆°n gi·∫£n th√†nh prompt ho√†n ch·ªânh v·ªõi AI thinking
 */

// ===== GLOBAL STATE & CONFIG =====
const APP_STATE = {
    isGenerating: false,
    currentCategory: 'auto',
    history: [],
    examples: [],
    thinkingSteps: []
};

const CONFIG = {
    MAX_HISTORY: 50,
    THINKING_DELAY: 800,
    TYPING_SPEED: 50,
    LOCAL_STORAGE_KEY: 'ai_prompt_assistant',
    VERSION: '2.0.0',
    
    // AI Provider Configuration
    AI_PROVIDERS: {
        openrouter: {
            name: 'OpenRouter AI',
            displayName: 'OpenRouter (Free Models Only)',
            endpoint: '/api/openrouter/chat',
            testEndpoint: '/api/test-openrouter',
            models: {
                // === QWEN MODELS ===
                'qwen3-8b': 'Qwen3 8B (4‚≠ê)',
                'qwen3-14b': 'Qwen3 14B (4‚≠ê) üéØ Balanced',
                'qwen3-4b': 'Qwen3 4B (3‚≠ê)',
                'qwen3-30b-a3b': 'Qwen3 30B A3B (4‚≠ê)',
                'qwen3-235b-a22b': 'Qwen3 235B A22B (5‚≠ê)',
                'qwen3-coder-free': 'Qwen3 Coder 480B (5‚≠ê) üíª Coding',
                'qwen2.5-72b-instruct': 'Qwen2.5 72B Instruct (4‚≠ê)',
                'qwen2.5-coder-32b': 'Qwen2.5 Coder 32B (4‚≠ê) üíª Coding',
                'qwen2.5-vl-32b': 'Qwen2.5 VL 32B (4‚≠ê)',
                'qwen2.5-vl-72b': 'Qwen2.5 VL 72B (4‚≠ê)',
                'qwq-32b': 'QwQ 32B Reasoning (4‚≠ê) üß† Reasoning',
                
                // === LLAMA MODELS ===
                'llama-3.1-405b': 'Llama 3.1 405B Instruct (5‚≠ê) üß† Reasoning',
                'llama-3.2-3b': 'Llama 3.2 3B Instruct (3‚≠ê)',
                'llama-3.3-8b': 'Llama 3.3 8B Instruct (4‚≠ê)',
                'llama-3.3-70b': 'Llama 3.3 70B Instruct (5‚≠ê) üìù General Chat',
                'llama-4-maverick': 'Llama 4 Maverick (5‚≠ê) ‚ö° Speed + Quality',
                'llama-4-scout': 'Llama 4 Scout (5‚≠ê) ‚ö° Speed + Quality',
                
                // === MISTRAL MODELS ===
                'mistral-7b-instruct': 'Mistral 7B Instruct (3‚≠ê)',
                'mistral-nemo': 'Mistral Nemo (3‚≠ê)',
                'mistral-small-3.1': 'Mistral Small 3.1 24B (4‚≠ê)',
                'mistral-small-3.2': 'Mistral Small 3.2 24B (4‚≠ê) üéØ Balanced',
                'mistral-small-2501': 'Mistral Small 2501 (4‚≠ê)',
                'devstral-small-2505': 'Devstral Small 2505 (4‚≠ê) üíª Coding',
                
                // === DEEPSEEK MODELS ===
                'deepseek-chat-v3.1': 'DeepSeek Chat V3.1 (5‚≠ê) üìù General Chat',
                'deepseek-chat-v3-0324': 'DeepSeek Chat V3 0324 (4‚≠ê)',
                'deepseek-r1': 'DeepSeek R1 (5‚≠ê) üß† Reasoning',
                'deepseek-r1-0528': 'DeepSeek R1 0528 (5‚≠ê) üß† Reasoning',
                'deepseek-r1-0528-qwen3': 'DeepSeek R1 0528 Qwen3 (4‚≠ê) üß† Reasoning',
                'deepseek-r1-distill-llama': 'DeepSeek R1 Distill Llama 70B (4‚≠ê) üß† Reasoning',
                
                // === GOOGLE MODELS ===
                'gemini-2.0-flash-exp': 'Gemini 2.0 Flash Experimental (4‚≠ê)',
                'gemma-2-9b': 'Gemma 2 9B (3‚≠ê)',
                'gemma-3-4b': 'Gemma 3 4B (3‚≠ê)',
                'gemma-3-12b': 'Gemma 3 12B (4‚≠ê)',
                'gemma-3-27b': 'Gemma 3 27B (4‚≠ê)',
                'gemma-3n-2b': 'Gemma 3n 2B (2‚≠ê)',
                'gemma-3n-4b': 'Gemma 3n 4B (3‚≠ê)',
                
                // === NVIDIA MODELS ===
                'nvidia-nemotron-nano': 'NVIDIA Nemotron Nano 9B (3‚≠ê)',
                
                // === OPENAI OSS MODELS ===
                'gpt-oss-120b': 'GPT-OSS 120B (4‚≠ê)',
                'gpt-oss-20b': 'GPT-OSS 20B (3‚≠ê)',
                
                // === Z.AI / GLM MODELS ===
                'glm-4.5-air-free': 'Z.AI GLM 4.5 Air (4‚≠ê) üìù General Chat',
                
                // === SPECIALIZED MODELS ===
                'microsoft-mai-ds-r1': 'Microsoft MAI DS R1 (4‚≠ê)',
                'kimi-k2': 'Kimi K2 (3‚≠ê)',
                'kimi-dev-72b': 'Kimi Dev 72B (4‚≠ê)',
                'kimi-vl-a3b': 'Kimi VL A3B Thinking (3‚≠ê)',
                'deephermes-3-llama': 'DeepHermes 3 Llama 3 8B (3‚≠ê)',
                'reka-flash-3': 'Reka Flash 3 (3‚≠ê)',
                'shisa-v2-llama': 'Shisa V2 Llama 3.3 70B (4‚≠ê)',
                'hunyuan-a13b': 'Tencent Hunyuan A13B (3‚≠ê)',
                'deepcoder-14b': 'Agentica Deepcoder 14B (3‚≠ê) üíª Coding',
                'qwq-32b-arliai': 'ArliAI QwQ 32B RpR (4‚≠ê) üß† Reasoning',
                'dolphin3-mistral-24b': 'Dolphin3.0 Mistral 24B (3‚≠ê)',
                'dolphin3-r1-mistral': 'Dolphin3.0 R1 Mistral 24B (4‚≠ê) üß† Reasoning',
                'dolphin-venice-edition': 'Dolphin Venice Uncensored (3‚≠ê)',
                'deepseek-r1t-chimera': 'DeepSeek R1T Chimera (4‚≠ê) üß† Reasoning',
                'deepseek-r1t2-chimera': 'DeepSeek R1T2 Chimera (4‚≠ê) üß† Reasoning'
            },
            defaultModel: 'qwen3-coder-free',
            features: ['56 Models + Specialties', 'üíª Coding Experts', 'üß† Reasoning Masters', '‚ö° Speed + Quality', 'üìù Chat Specialists'],
            icon: 'üöÄ',
            color: '#0066cc'
        },
        gemini: {
            name: 'Google Gemini',
            displayName: 'Google Gemini 2.0 Flash',
            endpoint: '/api/openai/chat', // Legacy endpoint
            testEndpoint: '/api/test-openai',
            models: {
                'gemini-2.0-flash-exp': 'Gemini 2.0 Flash (Experimental)',
                'gemini-2.5-pro': 'Gemini 2.5 Pro (Latest)',
                'gemini-2.5-flash': 'Gemini 2.5 Flash (Latest)',
                'gemini-2.0-flash-thinking-exp': 'Gemini 2.0 Flash Thinking',
                'gemini-1.5-pro-latest': 'Gemini 1.5 Pro Latest'
            },
            defaultModel: 'gemini-2.0-flash-exp',
            features: ['Free Tier', 'Fast Response', 'Google AI'],
            icon: '‚ö°',
            color: '#4285f4'
        },
        groq: {
            name: 'Groq AI',
            displayName: 'Groq AI (Lightning Fast)',
            endpoint: '/api/groq/chat',
            testEndpoint: '/api/test-groq',
            models: {
                'llama-3.1-8b-instant': 'Llama 3.1 8B Instant (4‚≠ê) ‚ö° Speed + Quality',
                'llama-3.1-70b-versatile': 'Llama 3.1 70B Versatile (4‚≠ê)',
                'llama-3.1-405b-reasoning': 'Llama 3.1 405B Reasoning (5‚≠ê) üß† Reasoning',
                'llama-3.2-1b-preview': 'Llama 3.2 1B Preview (2‚≠ê)',
                'llama-3.2-3b-preview': 'Llama 3.2 3B Preview (3‚≠ê)',
                'llama-3.2-11b-vision-preview': 'Llama 3.2 11B Vision (3‚≠ê)',
                'llama-3.2-90b-vision-preview': 'Llama 3.2 90B Vision (4‚≠ê)',
                'mixtral-8x7b-32768': 'Mixtral 8x7B MoE (4‚≠ê) üéØ Balanced',
                'gemma-7b-it': 'Gemma 7B Instruct (3‚≠ê)',
                'gemma2-9b-it': 'Gemma 2 9B Instruct (3‚≠ê)',
                'qwen3-32b': 'Qwen3 32B (4‚≠ê)',
                'llama-4-maverick': 'Llama 4 Maverick (5‚≠ê) ‚ö° Speed + Quality',
                'llama-4-scout': 'Llama 4 Scout (5‚≠ê) ‚ö° Speed + Quality',
                'deepseek-r1-70b': 'DeepSeek R1 70B (5‚≠ê) üß† Reasoning',
                'llama-3.3-70b': 'Llama 3.3 70B (5‚≠ê) üìù General Chat',
                'allam-2-7b': 'Allam 2 7B Multilingual (3‚≠ê)',
                'groq-compound': 'Groq Compound Hybrid (4‚≠ê) üß† Reasoning',
                'groq-compound-mini': 'Groq Compound Mini (3‚≠ê)',
                'kimi-k2-instruct': 'Kimi K2 Long Context (3‚≠ê)',
                'kimi-k2-instruct-0905': 'Kimi K2 0905 Version (3‚≠ê)',
                'llama-guard-4-12b': 'Llama Guard 4 12B Safety (3‚≠ê)',
                'llama-prompt-guard-2-22m': 'Llama Prompt Guard 22M (2‚≠ê)',
                'llama-prompt-guard-2-86m': 'Llama Prompt Guard 86M (3‚≠ê)',
                'whisper-large-v3': 'Whisper Large V3 Speech (4‚≠ê)',
                'gpt-oss-120b': 'GPT-OSS 120B (4‚≠ê)',
                'gpt-oss-20b': 'GPT-OSS 20B (3‚≠ê)'
            },
            defaultModel: 'llama-3.1-8b-instant',
            features: ['26 Models + Specialties', '‚ö° Lightning Speed Focus', 'üß† Reasoning + Speed', 'üìù Chat + Speed', 'Safety Models'],
            icon: '‚ö°',
            color: '#f39800'
        }
    },
    
    // Default AI Provider
    DEFAULT_PROVIDER: 'openrouter',
    CURRENT_PROVIDER: 'openrouter',
    CURRENT_MODEL: 'gpt-4o-mini',
    
    // Legacy OpenAI Configuration (for backwards compatibility)
    OPENAI_API_KEY: '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',
    OPENAI_API_URL: 'https://openrouter.ai/api/v1/chat/completions',
    OPENAI_MODEL: 'gpt-4o-mini',
    MAX_TOKENS: 2000,
    TEMPERATURE: 0.7,
    
    // Proxy Server Configuration (ƒë·ªÉ bypass CORS)
    PROXY_SERVER_URL: 'http://localhost:3001',
    USE_PROXY: true,
    
    // Environment Detection
    isLocalhost: window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1',
    isFileProtocol: window.location.protocol === 'file:',
    isServerMode: false
};

// ===== AI PROMPT TEMPLATES & LOGIC =====
const PROMPT_TEMPLATES = {
    auto: {
        name: "T·ª± ƒë·ªông nh·∫≠n di·ªán",
        icon: "ü§ñ",
        systemPrompt: `B·∫°n l√† m·ªôt AI chuy√™n gia ph√¢n t√≠ch v√† m·ªü r·ªông prompt. H√£y ph√¢n t√≠ch c√¢u h·ªèi/y√™u c·∫ßu ƒë∆°n gi·∫£n c·ªßa ng∆∞·ªùi d√πng v√† t·∫°o ra m·ªôt prompt ho√†n ch·ªânh, chi ti·∫øt v√† chuy√™n nghi·ªáp.

NHI·ªÜM V·ª§:
1. Ph√¢n t√≠ch ng·ªØ c·∫£nh v√† m·ª•c ƒë√≠ch c·ªßa y√™u c·∫ßu
2. X√°c ƒë·ªãnh lo·∫°i prompt ph√π h·ª£p (code, creative, business, analysis, etc.)
3. M·ªü r·ªông th√†nh prompt ƒë·∫ßy ƒë·ªß v·ªõi structure r√µ r√†ng
4. Th√™m context, constraints v√† expected output

ƒê·ªäNH D·∫†NG OUTPUT:
- Role/Context: X√°c ƒë·ªãnh vai tr√≤ AI c·∫ßn ƒë·∫£m nh·∫≠n  
- Task Description: M√¥ t·∫£ chi ti·∫øt nhi·ªám v·ª•
- Specific Requirements: C√°c y√™u c·∫ßu c·ª• th·ªÉ
- Output Format: ƒê·ªãnh d·∫°ng k·∫øt qu·∫£ mong mu·ªën
- Additional Guidelines: H∆∞·ªõng d·∫´n b·ªï sung

H√£y t·∫°o prompt chuy√™n nghi·ªáp v√† d·ªÖ s·ª≠ d·ª•ng.`
    },
    
    code: {
        name: "L·∫≠p tr√¨nh",
        icon: "üíª",
        systemPrompt: `B·∫°n l√† Senior Software Engineer v·ªõi 10+ nƒÉm kinh nghi·ªám. M·ªü r·ªông y√™u c·∫ßu coding ƒë∆°n gi·∫£n th√†nh prompt ho√†n ch·ªânh.

FOCUS AREAS:
- Code architecture & best practices
- Error handling & edge cases  
- Performance optimization
- Testing & documentation
- Security considerations

STRUCTURE:
1. **Role & Context**: X√°c ƒë·ªãnh c√¥ng ngh·ªá/framework
2. **Functional Requirements**: T√≠nh nƒÉng c·∫ßn implement
3. **Technical Specifications**: Chi ti·∫øt k·ªπ thu·∫≠t
4. **Code Quality Standards**: Standards & conventions
5. **Deliverables**: Output mong mu·ªën (code + docs + tests)

T·∫°o prompt chi ti·∫øt ƒë·ªÉ AI c√≥ th·ªÉ generate code production-ready.`
    },

    creative: {
        name: "S√°ng t·∫°o n·ªôi dung", 
        icon: "üé®",
        systemPrompt: `B·∫°n l√† Creative Director v·ªõi chuy√™n m√¥n v·ªÅ content creation, storytelling v√† brand communication. M·ªü r·ªông √Ω t∆∞·ªüng s√°ng t·∫°o th√†nh brief ho√†n ch·ªânh.

CREATIVE DIMENSIONS:
- Target audience & personas
- Brand voice & tone
- Visual/content style
- Emotional impact
- Engagement strategy

STRUCTURE:
1. **Creative Brief**: T·ªïng quan d·ª± √°n
2. **Audience Analysis**: Ph√¢n t√≠ch ƒë·ªëi t∆∞·ª£ng
3. **Content Strategy**: Chi·∫øn l∆∞·ª£c n·ªôi dung  
4. **Creative Guidelines**: H∆∞·ªõng d·∫´n s√°ng t·∫°o
5. **Success Metrics**: Ti√™u ch√≠ ƒë√°nh gi√°

T·∫°o prompt gi√∫p AI t·∫°o n·ªôi dung h·∫•p d·∫´n v√† hi·ªáu qu·∫£.`
    },

    business: {
        name: "Kinh doanh",
        icon: "üíº", 
        systemPrompt: `B·∫°n l√† Business Consultant v·ªõi MBA v√† 15+ nƒÉm kinh nghi·ªám strategy & operations. M·ªü r·ªông business query th√†nh comprehensive analysis prompt.

BUSINESS FOCUS:
- Strategic planning & execution
- Market analysis & competitive landscape
- Financial modeling & projections
- Risk assessment & mitigation
- Implementation roadmap

STRUCTURE:
1. **Business Context**: Industry & company background
2. **Objective & Goals**: Clear business objectives
3. **Analysis Framework**: Ph∆∞∆°ng ph√°p ph√¢n t√≠ch
4. **Key Considerations**: Factors ·∫£nh h∆∞·ªüng
5. **Expected Outcomes**: Deliverables & timeline

T·∫°o prompt cho analysis s√¢u s·∫Øc v√† actionable insights.`
    },

    analysis: {
        name: "Ph√¢n t√≠ch d·ªØ li·ªáu",
        icon: "üìä",
        systemPrompt: `B·∫°n l√† Data Scientist v·ªõi PhD v√† expertise trong statistical analysis, machine learning v√† data visualization. M·ªü r·ªông data question th√†nh comprehensive analysis prompt.

ANALYTICAL APPROACH:
- Data exploration & cleaning
- Statistical analysis & hypothesis testing
- Visualization & interpretation
- Model building & validation
- Insights & recommendations

STRUCTURE:
1. **Data Context**: Dataset description & source
2. **Research Questions**: Hypotheses c·∫ßn test
3. **Methodology**: Ph∆∞∆°ng ph√°p ph√¢n t√≠ch
4. **Technical Requirements**: Tools & techniques
5. **Output Specifications**: Charts, reports, models

T·∫°o prompt cho data analysis chuy√™n s√¢u v√† accurate.`
    },

    education: {
        name: "Gi√°o d·ª•c",
        icon: "üìö",
        systemPrompt: `B·∫°n l√† Educational Designer v·ªõi M.Ed v√† chuy√™n m√¥n v·ªÅ curriculum development, learning psychology v√† instructional design. M·ªü r·ªông educational request th√†nh detailed learning prompt.

PEDAGOGICAL ELEMENTS:
- Learning objectives & outcomes
- Target learner analysis
- Content structure & progression
- Engagement strategies
- Assessment methods

STRUCTURE:
1. **Learning Context**: Subject matter & level
2. **Learner Profile**: Audience characteristics
3. **Educational Goals**: Learning objectives
4. **Instructional Design**: Teaching approach
5. **Assessment Strategy**: Evaluation methods

T·∫°o prompt cho educational content hi·ªáu qu·∫£ v√† engaging.`
    },

    research: {
        name: "Nghi√™n c·ª©u",
        icon: "üî¨",
        systemPrompt: `B·∫°n l√† Research Director v·ªõi PhD v√† expertise trong research methodology, literature review v√† academic writing. M·ªü r·ªông research question th√†nh comprehensive research prompt.

RESEARCH FRAMEWORK:
- Literature review & background
- Research methodology & design
- Data collection & analysis
- Academic rigor & ethics
- Publication standards

STRUCTURE:  
1. **Research Context**: Field & background
2. **Research Questions**: Primary & secondary questions
3. **Methodology**: Research approach & methods
4. **Literature Review**: Relevant studies & theories
5. **Expected Contributions**: Novel insights & impact

T·∫°o prompt cho research ch·∫•t l∆∞·ª£ng academic standard.`
    }
};

// ===== OPENAI API INTEGRATION =====

/**
 * G·ªçi AI API ƒë·ªÉ t·∫°o prompt expansion (supports multiple providers)
 * @param {string} userInput - Input t·ª´ ng∆∞·ªùi d√πng  
 * @param {object} template - Template category ƒë∆∞·ª£c ch·ªçn
 * @param {string} provider - AI provider ('openrouter' ho·∫∑c 'gemini')
 * @param {string} model - Model name (optional)
 * @returns {Promise<string>} - Expanded prompt t·ª´ AI
 */
async function callAIAPI(userInput, template, provider = null, model = null, isRetry = false) {
    try {
        // Use current provider if not specified
        provider = provider || CONFIG.CURRENT_PROVIDER;
        model = model || CONFIG.CURRENT_MODEL;
        
        const providerConfig = CONFIG.AI_PROVIDERS[provider];
        if (!providerConfig) {
            throw new Error(`Unknown provider: ${provider}`);
        }
        
        const systemPrompt = template.systemPrompt || PROMPT_TEMPLATES.auto.systemPrompt;
        
        console.log(`ü§ñ Calling ${providerConfig.displayName} (${model})...`);
        showToast(`ƒêang k·∫øt n·ªëi v·ªõi ${providerConfig.displayName}...`, 'info', 2000);
        
        // Always use proxy server for CORS bypass
        const response = await callAIViaProxy(userInput, systemPrompt, provider, model);
        
        console.log(`‚úÖ ƒê√£ nh·∫≠n response t·ª´ ${providerConfig.displayName}`);
        showToast(`ƒê√£ t·∫°o prompt v·ªõi ${providerConfig.displayName}!`, 'success', 2000);
        
        return response;
        
    } catch (error) {
        console.error(`‚ùå ${provider} AI API Error:`, error);
        
        // Handle payment errors specifically for OpenRouter
        if (error.message && error.message.includes('402') && provider === 'openrouter') {
            console.log('üí∞ Detected payment error - trying free model first...');
            
            // Try with a free model first
            if (!isModelFree(provider, model)) {
                showPaymentWarning(provider, model);
                const freeModel = 'qwen3-8b'; // Default free model
                try {
                    return await callAIAPI(userInput, template, provider, freeModel, true);
                } catch (freeModelError) {
                    console.log('Free model also failed, falling back to other providers...');
                }
            }
        }
        
        // Prevent infinite loop by only allowing one fallback attempt
        if (!isRetry) {
            // Smart fallback: try providers in order of preference
            const fallbackOrder = {
                'openrouter': ['groq', 'gemini'],
                'groq': ['openrouter', 'gemini'], 
                'gemini': ['groq', 'openrouter']
            };
            
            const fallbackProviders = fallbackOrder[provider] || [];
            
            for (const fallbackProvider of fallbackProviders) {
                if (CONFIG.AI_PROVIDERS[fallbackProvider]) {
                    console.log(`üîÑ Trying fallback to ${CONFIG.AI_PROVIDERS[fallbackProvider].displayName}...`);
                    showToast(`${CONFIG.AI_PROVIDERS[provider].displayName} failed, trying ${CONFIG.AI_PROVIDERS[fallbackProvider].displayName}...`, 'warning', 3000);
                    
                    const fallbackModel = CONFIG.AI_PROVIDERS[fallbackProvider].defaultModel;
                    return await callAIAPI(userInput, template, fallbackProvider, fallbackModel, true);
                }
            }
        }
        
        // Final fallback to simulation
        console.log('üîÑ All providers failed, fallback to simulation mode...');
        showToast('L·ªói k·∫øt n·ªëi AI. ƒêang s·ª≠ d·ª•ng ch·∫ø ƒë·ªô demo...', 'warning');
        
        return await simulateAIExpansionFallback(userInput, template);
    }
}

// Backwards compatibility
async function callOpenAIAPI(userInput, template) {
    return await callAIAPI(userInput, template);
}

/**
 * G·ªçi AI API th√¥ng qua proxy server (supports multiple providers)
 * @param {string} userInput - Input t·ª´ ng∆∞·ªùi d√πng
 * @param {string} systemPrompt - System prompt
 * @param {string} provider - AI provider
 * @param {string} model - Model name
 * @returns {Promise<string>} - AI response
 */
async function callAIViaProxy(userInput, systemPrompt, provider, model) {
    const providerConfig = CONFIG.AI_PROVIDERS[provider];
    const proxyUrl = `${CONFIG.PROXY_SERVER_URL}${providerConfig.endpoint}`;
    
    const requestBody = {
        systemPrompt: systemPrompt,
        userInput: `Y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng: "${userInput}"\n\nH√£y t·∫°o m·ªôt prompt ho√†n ch·ªânh, chi ti·∫øt v√† chuy√™n nghi·ªáp d·ª±a tr√™n y√™u c·∫ßu n√†y.`,
        provider: provider
    };
    
    // Add model for OpenRouter and Groq
    if ((provider === 'openrouter' || provider === 'groq') && model) {
        requestBody.model = model;
    }
    
    const response = await fetch(proxyUrl, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
    });

    if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`${providerConfig.name} Error: ${response.status} - ${errorData.error || 'Unknown error'}`);
    }

    const data = await response.json();
    
    if (!data.success || !data.data.choices || !data.data.choices[0]) {
        throw new Error(`Invalid response from ${providerConfig.name}`);
    }

    return data.data.choices[0].message.content.trim();
}

// Legacy function for backwards compatibility
async function callOpenAIViaProxy(userInput, systemPrompt) {
    return await callAIViaProxy(userInput, systemPrompt, CONFIG.CURRENT_PROVIDER, CONFIG.CURRENT_MODEL);
}

/**
 * G·ªçi OpenAI API tr·ª±c ti·∫øp (c√≥ th·ªÉ g·∫∑p CORS)
 * @param {string} userInput - Input t·ª´ ng∆∞·ªùi d√πng
 * @param {string} systemPrompt - System prompt
 * @returns {Promise<string>} - AI response
 */
async function callOpenAIDirectly(userInput, systemPrompt) {
    const response = await fetch(CONFIG.OPENAI_API_URL, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${CONFIG.OPENAI_API_KEY}`
        },
        body: JSON.stringify({
            model: CONFIG.OPENAI_MODEL,
            messages: [
                {
                    role: 'system', 
                    content: systemPrompt
                },
                {
                    role: 'user',
                    content: `Y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng: "${userInput}"\n\nH√£y t·∫°o m·ªôt prompt ho√†n ch·ªânh, chi ti·∫øt v√† chuy√™n nghi·ªáp d·ª±a tr√™n y√™u c·∫ßu n√†y.`
                }
            ],
            max_tokens: CONFIG.MAX_TOKENS,
            temperature: CONFIG.TEMPERATURE,
            top_p: 1,
            frequency_penalty: 0,
            presence_penalty: 0
        })
    });

    if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`OpenAI API Error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
    }

    const data = await response.json();
    
    if (!data.choices || !data.choices[0] || !data.choices[0].message) {
        throw new Error('Invalid response format from OpenAI API');
    }

    return data.choices[0].message.content.trim();
}

/**
 * X√°c ƒë·ªãnh c√≥ n√™n s·ª≠ d·ª•ng proxy server kh√¥ng
 * @returns {Promise<boolean>}
 */
async function shouldUseProxyServer() {
    // N·∫øu ƒëang ch·∫°y t·ª´ file:// th√¨ b·∫Øt bu·ªôc ph·∫£i d√πng proxy
    if (CONFIG.isFileProtocol) {
        return true;
    }
    
    // N·∫øu config b·∫Øt bu·ªôc d√πng proxy
    if (CONFIG.USE_PROXY) {
        // Ki·ªÉm tra proxy server c√≥ ho·∫°t ƒë·ªông kh√¥ng
        try {
            const response = await fetch(`${CONFIG.PROXY_SERVER_URL}/health`, { 
                method: 'GET',
                timeout: 2000 
            });
            return response.ok;
        } catch (error) {
            console.warn('‚ö†Ô∏è Proxy server kh√¥ng ho·∫°t ƒë·ªông, chuy·ªÉn sang g·ªçi tr·ª±c ti·∫øp:', error.message);
            return false;
        }
    }
    
    return false;
}

/**
 * Fallback function when OpenAI API fails
 * @param {string} input - User input
 * @param {object} template - Template object  
 * @returns {Promise<string>} - Simulated expanded prompt
 */
async function simulateAIExpansionFallback(input, template) {
    // Delay ƒë·ªÉ gi·ªëng nh∆∞ ƒëang g·ªçi API
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    return `
# ${template.name} - Prompt Chi Ti·∫øt (Demo Mode)

## üìã NG·ªÆ C·∫¢NH V√Ä M·ª§C ƒê√çCH
**Y√™u c·∫ßu g·ªëc:** ${input}

**Vai tr√≤ AI:** ${getAIRoleForCategory(template)}

## üéØ NHI·ªÜM V·ª§ CHI TI·∫æT
${generateDetailedTask(input, template)}

## ‚öôÔ∏è Y√äU C·∫¶U C·ª§ TH·ªÇ
${generateSpecificRequirements(input, template)}

## üìä ƒê·ªäNH D·∫†NG OUTPUT
${generateOutputFormat(template)}

## üîç TI√äU CH√ç CH·∫§T L∆Ø·ª¢NG
${generateQualityCriteria(template)}

## üí° H∆Ø·ªöNG D·∫™N B·ªî SUNG
${generateAdditionalGuidelines(input, template)}

---
*‚ö†Ô∏è ƒê√¢y l√† ch·∫ø ƒë·ªô demo. ƒê·ªÉ s·ª≠ d·ª•ng AI th·∫≠t, vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet v√† API key.*
*Prompt ƒë∆∞·ª£c t·∫°o b·ªüi AI Prompt Assistant - Phi√™n b·∫£n ${CONFIG.VERSION}*
    `.trim();
}

/**
 * Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa OpenAI API key
 * @returns {boolean} - True n·∫øu API key h·ª£p l·ªá
 */
function validateOpenAIApiKey() {
    const apiKey = CONFIG.OPENAI_API_KEY;
    
    if (!apiKey || apiKey.length < 40) {
        console.warn('‚ö†Ô∏è OpenAI API key kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh');
        return false;
    }
    
    if (!apiKey.startsWith('sk-')) {
        console.warn('‚ö†Ô∏è OpenAI API key c√≥ format kh√¥ng ƒë√∫ng');
        return false;
    }
    
    return true;
}

/**
 * Test connection t·ªõi AI provider
 * @param {string} provider - Provider name ('openrouter' ho·∫∑c 'gemini')
 * @returns {Promise<boolean>} - True n·∫øu connection th√†nh c√¥ng
 */
async function testAIConnection(provider = null) {
    provider = provider || CONFIG.CURRENT_PROVIDER;
    
    try {
        const providerConfig = CONFIG.AI_PROVIDERS[provider];
        if (!providerConfig) {
            console.error(`Unknown provider: ${provider}`);
            return false;
        }
        
        console.log(`üß™ Testing ${providerConfig.displayName} connection...`);
        
        const testUrl = `${CONFIG.PROXY_SERVER_URL}${providerConfig.testEndpoint}`;
        const response = await fetch(testUrl);
        const data = await response.json();
        
        return data.success;
        
    } catch (error) {
        console.error(`üî¥ ${provider} Connection Test Failed:`, error);
        return false;
    }
}

/**
 * Test all available AI providers
 * @returns {Promise<Object>} - Results for all providers
 */
async function testAllAIConnections() {
    try {
        console.log('üß™ Testing all AI providers...');
        
        const testUrl = `${CONFIG.PROXY_SERVER_URL}/api/test-all`;
        const response = await fetch(testUrl);
        const data = await response.json();
        
        return data.results;
        
    } catch (error) {
        console.error('üî¥ All AI Connection Test Failed:', error);
        return {};
    }
}

// Legacy function for backwards compatibility
async function testOpenAIConnection() {
    return await testAIConnection(CONFIG.CURRENT_PROVIDER);
}

// ===== AI THINKING PROCESS SIMULATOR =====
const THINKING_PATTERNS = {
    analyze: [
        "Ph√¢n t√≠ch ng·ªØ c·∫£nh v√† m·ª•c ƒë√≠ch c·ªßa y√™u c·∫ßu...",
        "X√°c ƒë·ªãnh lo·∫°i prompt v√† domain knowledge c·∫ßn thi·∫øt...",
        "ƒê√°nh gi√° ƒë·ªô ph·ª©c t·∫°p v√† scope c·ªßa nhi·ªám v·ª•...",
        "T√¨m hi·ªÉu c√°c y·∫øu t·ªë ·∫£nh h∆∞·ªüng v√† constraints..."
    ],
    
    categorize: [
        "Nh·∫≠n di·ªán category ph√π h·ª£p nh·∫•t...",
        "So s√°nh v·ªõi c√°c template c√≥ s·∫µn...", 
        "X√°c ƒë·ªãnh framework v√† approach t·ªët nh·∫•t...",
        "ƒê√°nh gi√° requirements ƒë·∫∑c bi·ªát..."
    ],
    
    structure: [
        "Thi·∫øt k·∫ø c·∫•u tr√∫c prompt logic v√† r√µ r√†ng...",
        "X√°c ƒë·ªãnh c√°c section v√† subsection c·∫ßn thi·∫øt...",
        "S·∫Øp x·∫øp th√¥ng tin theo ƒë·ªô ∆∞u ti√™n...",
        "T·ªëi ∆∞u flow v√† readability..."
    ],
    
    enhance: [
        "Th√™m context v√† background information...",
        "B·ªï sung specific requirements v√† constraints...",
        "ƒê·ªãnh nghƒ©a expected output format...",
        "TƒÉng c∆∞·ªùng ƒë·ªô ch√≠nh x√°c v√† completeness..."
    ],
    
    validate: [
        "Ki·ªÉm tra t√≠nh nh·∫•t qu√°n v√† logic...",
        "ƒê·∫£m b·∫£o prompt ƒë·∫ßy ƒë·ªß v√† actionable...",
        "Verify clarity v√† ease of understanding...",
        "Final review v√† polish..."
    ]
};

// ===== EXAMPLE PROMPTS DATABASE =====
const EXAMPLE_PROMPTS = [
    {
        category: 'code',
        icon: 'üíª',
        title: 'T·∫°o API REST',
        description: 'Thi·∫øt k·∫ø v√† implement RESTful API v·ªõi authentication',
        simple: 'T√¥i mu·ªën t·∫°o m·ªôt API cho ·ª©ng d·ª•ng blog',
        preview: 'API endpoints, authentication, CRUD operations...'
    },
    {
        category: 'creative',
        icon: 'üé®', 
        title: 'Content Marketing',
        description: 'T·∫°o chi·∫øn l∆∞·ª£c content cho social media',
        simple: 'T√¥i c·∫ßn vi·∫øt content cho fanpage b√°n qu·∫ßn √°o',
        preview: 'Brand voice, target audience, content calendar...'
    },
    {
        category: 'business',
        icon: 'üíº',
        title: 'Business Plan',
        description: 'Ph√¢n t√≠ch th·ªã tr∆∞·ªùng v√† l·∫≠p k·∫ø ho·∫°ch kinh doanh',
        simple: 'T√¥i mu·ªën m·ªü qu√°n cafe ·ªü H√† N·ªôi',
        preview: 'Market analysis, financial projections, strategy...'
    },
    {
        category: 'analysis',
        icon: 'üìä',
        title: 'Data Analysis',
        description: 'Ph√¢n t√≠ch d·ªØ li·ªáu b√°n h√†ng v√† xu h∆∞·ªõng',
        simple: 'Ph√¢n t√≠ch d·ªØ li·ªáu b√°n h√†ng c·ªßa c·ª≠a h√†ng',
        preview: 'Statistical analysis, visualizations, insights...'
    },
    {
        category: 'education',
        icon: 'üìö',
        title: 'Kh√≥a h·ªçc Online',
        description: 'Thi·∫øt k·∫ø curriculum cho kh√≥a h·ªçc tr·ª±c tuy·∫øn',
        simple: 'T·∫°o kh√≥a h·ªçc d·∫°y JavaScript cho ng∆∞·ªùi m·ªõi',
        preview: 'Learning objectives, modules, assessments...'
    },
    {
        category: 'research',
        icon: 'üî¨',
        title: 'Literature Review',
        description: 'T·ªïng quan t√†i li·ªáu nghi√™n c·ª©u v·ªÅ AI',
        simple: 'Nghi√™n c·ª©u v·ªÅ ·ª©ng d·ª•ng AI trong gi√°o d·ª•c',
        preview: 'Research questions, methodology, sources...'
    }
];

// ===== DOM ELEMENTS =====
let elements = {};

// ===== INITIALIZATION =====
document.addEventListener('DOMContentLoaded', async () => {
    initializeElements();
    initializeEventListeners(); 
    initializeUISelections(); // Initialize provider/model dropdowns
    loadExamples();
    loadHistory();
    initializeTooltips();
    
    // Test AI providers connection
    await initializeAIStatus();
    
    console.log('üöÄ AI Prompt Assistant v2.0 initialized successfully!');
    showToast('Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi AI Prompt Assistant v2.0!', 'info');
});

/**
 * Ki·ªÉm tra v√† hi·ªÉn th·ªã tr·∫°ng th√°i AI providers khi kh·ªüi ƒë·ªông
 */
async function initializeAIStatus() {
    console.log('üîç ƒêang test k·∫øt n·ªëi t·∫•t c·∫£ AI providers...');
    showToast('ƒêang ki·ªÉm tra k·∫øt n·ªëi AI providers...', 'info', 3000);
    
    const allResults = await testAllAIConnections();
    let workingProviders = [];
    let failedProviders = [];
    
    // Check each provider
    for (const [providerName, result] of Object.entries(allResults)) {
        if (result.success) {
            workingProviders.push(CONFIG.AI_PROVIDERS[providerName]?.displayName || providerName);
        } else {
            failedProviders.push(CONFIG.AI_PROVIDERS[providerName]?.displayName || providerName);
        }
    }
    
    // Update status based on results
    if (workingProviders.length > 0) {
        console.log(`‚úÖ K·∫øt n·ªëi th√†nh c√¥ng: ${workingProviders.join(', ')}`);
        showToast(`ü§ñ S·∫µn s√†ng v·ªõi ${workingProviders.length} AI provider(s)!`, 'success', 4000);
        
        // Set working provider as current if current one failed
        if (failedProviders.includes(CONFIG.AI_PROVIDERS[CONFIG.CURRENT_PROVIDER]?.displayName)) {
            const firstWorkingProvider = Object.keys(allResults).find(p => allResults[p].success);
            if (firstWorkingProvider) {
                switchAIProvider(firstWorkingProvider);
            }
        }
    } else {
        console.error('‚ùå T·∫•t c·∫£ AI providers ƒë·ªÅu l·ªói');
        showToast('‚ö†Ô∏è L·ªói k·∫øt n·ªëi AI - s·ª≠ d·ª•ng ch·∫ø ƒë·ªô demo', 'error', 5000);
    }
    
    if (failedProviders.length > 0) {
        console.warn(`‚ö†Ô∏è Providers l·ªói: ${failedProviders.join(', ')}`);
    }
}

// Backwards compatibility
async function initializeOpenAIStatus() {
    return await initializeAIStatus();
}

function initializeElements() {
    elements = {
        // Input elements
        simpleInput: document.getElementById('simpleInput'),
        categorySelect: document.getElementById('categorySelect'), 
        providerSelect: document.getElementById('providerSelect'),
        modelSelect: document.getElementById('modelSelect'),
        generateBtn: document.getElementById('generateBtn'),
        
        // Results elements
        resultsSection: document.getElementById('resultsSection'),
        thinkingProcess: document.getElementById('thinkingProcess'),
        thinkingSteps: document.getElementById('thinkingSteps'),
        promptResult: document.getElementById('promptResult'),
        resultContent: document.getElementById('resultContent'),
        resultStats: document.getElementById('resultStats'),
        
        // Action buttons
        copyBtn: document.getElementById('copyBtn'),
        saveBtn: document.getElementById('saveBtn'), 
        shareBtn: document.getElementById('shareBtn'),
        
        // Navigation
        navBtns: document.querySelectorAll('.nav-btn'),
        
        // Examples & History
        examplesGrid: document.getElementById('examplesGrid'),
        historySection: document.getElementById('historySection'),
        historyList: document.getElementById('historyList'),
        clearHistoryBtn: document.getElementById('clearHistoryBtn'),
        
        // UI elements
        toastContainer: document.getElementById('toastContainer'),
        loadingOverlay: document.getElementById('loadingOverlay')
    };
}

function initializeEventListeners() {
    // Input events
    elements.simpleInput.addEventListener('input', handleInputChange);
    elements.simpleInput.addEventListener('keydown', handleKeyDown);
    elements.categorySelect.addEventListener('change', handleCategoryChange);
    elements.providerSelect.addEventListener('change', handleProviderChange);
    elements.modelSelect.addEventListener('change', handleModelChange);
    elements.generateBtn.addEventListener('click', handleGenerate);
    
    // Action button events  
    elements.copyBtn.addEventListener('click', handleCopy);
    elements.saveBtn.addEventListener('click', handleSave);
    elements.shareBtn.addEventListener('click', handleShare);
    
    // Navigation events
    elements.navBtns.forEach(btn => {
        btn.addEventListener('click', () => handleNavigation(btn.dataset.category));
    });
    
    // History events
    elements.clearHistoryBtn.addEventListener('click', handleClearHistory);
    
    // Global events
    document.addEventListener('click', handleGlobalClick);
    window.addEventListener('beforeunload', handleBeforeUnload);
}

// ===== INPUT HANDLING =====
function handleInputChange() {
    const value = elements.simpleInput.value.trim();
    elements.generateBtn.disabled = !value || APP_STATE.isGenerating;
    
    // Auto-categorize based on input
    if (elements.categorySelect.value === 'auto') {
        const detectedCategory = detectCategory(value);
        if (detectedCategory !== 'auto') {
            updateCategoryIndicator(detectedCategory);
        }
    }
}

function handleKeyDown(e) {
    if (e.ctrlKey && e.key === 'Enter') {
        e.preventDefault();
        if (!elements.generateBtn.disabled) {
            handleGenerate();
        }
    }
}

function handleCategoryChange() {
    APP_STATE.currentCategory = elements.categorySelect.value;
    filterExamples(APP_STATE.currentCategory);
}

function handleProviderChange() {
    const selectedProvider = elements.providerSelect.value;
    
    // Switch AI provider
    const success = switchAIProvider(selectedProvider);
    
    if (success) {
        // Update model dropdown with available models for this provider
        updateModelDropdown(selectedProvider);
        
        // Update current model to default for this provider
        const providerConfig = CONFIG.AI_PROVIDERS[selectedProvider];
        CONFIG.CURRENT_MODEL = providerConfig.defaultModel;
        elements.modelSelect.value = CONFIG.CURRENT_MODEL;
        
        console.log(`üîÑ Provider switched to: ${providerConfig.displayName}`);
    }
}

function handleModelChange() {
    const selectedModel = elements.modelSelect.value;
    CONFIG.CURRENT_MODEL = selectedModel;
    
    const providerConfig = CONFIG.AI_PROVIDERS[CONFIG.CURRENT_PROVIDER];
    const modelName = providerConfig.models[selectedModel] || selectedModel;
    
    console.log(`üéØ Model changed to: ${modelName}`);
    showToast(`Model: ${modelName}`, 'info', 1500);
}

// ===== CORE AI LOGIC =====
async function handleGenerate() {
    if (APP_STATE.isGenerating) return;
    
    const input = elements.simpleInput.value.trim();
    if (!input) {
        showToast('Vui l√≤ng nh·∫≠p c√¢u h·ªèi ho·∫∑c y√™u c·∫ßu c·ªßa b·∫°n', 'warning');
        return;
    }
    
    try {
        APP_STATE.isGenerating = true;
        setLoadingState(true);
        
        // Step 1: Show thinking process
        updateProgressStep(1, 'active');
        updateLoadingMessage('üß† ƒêang ph√¢n t√≠ch y√™u c·∫ßu c·ªßa b·∫°n...');
        await showThinkingProcess(input);
        await new Promise(resolve => setTimeout(resolve, 500)); // Brief pause for UX
        
        // Step 2: Generate expanded prompt
        updateProgressStep(2, 'active');
        updateLoadingMessage('ü§ñ ƒêang k·∫øt n·ªëi v·ªõi AI ƒë·ªÉ t·∫°o prompt...');
        const expandedPrompt = await generateExpandedPrompt(input);
        await new Promise(resolve => setTimeout(resolve, 300));
        
        // Step 3: Display results
        updateProgressStep(3, 'active');
        updateLoadingMessage('‚ú® ƒêang ho√†n thi·ªán v√† hi·ªÉn th·ªã k·∫øt qu·∫£...');
        await displayResults(expandedPrompt, input);
        
        // Step 4: Save to history (no UI update needed)
        saveToHistory(input, expandedPrompt);
        
    } catch (error) {
        console.error('Error generating prompt:', error);
        showToast('C√≥ l·ªói x·∫£y ra khi t·∫°o prompt. Vui l√≤ng th·ª≠ l·∫°i!', 'error');
    } finally {
        APP_STATE.isGenerating = false;
        setLoadingState(false);
        
        // Mark all steps as completed when finished
        setTimeout(() => {
            updateProgressStep(3, 'completed');
            updateLoadingMessage('‚úÖ Ho√†n th√†nh!');
        }, 100);
    }
}

async function showThinkingProcess(input) {
    elements.resultsSection.style.display = 'block';
    elements.thinkingProcess.style.display = 'block';
    elements.promptResult.style.display = 'none';
    
    elements.resultsSection.scrollIntoView({ behavior: 'smooth' });
    
    // Clear previous steps
    elements.thinkingSteps.innerHTML = '';
    APP_STATE.thinkingSteps = [];
    
    // Generate thinking steps based on input
    const thinkingFlow = generateThinkingFlow(input);
    
    for (let i = 0; i < thinkingFlow.length; i++) {
        await new Promise(resolve => setTimeout(resolve, CONFIG.THINKING_DELAY));
        await addThinkingStep(thinkingFlow[i], i + 1);
    }
    
    // Final pause before showing result
    await new Promise(resolve => setTimeout(resolve, CONFIG.THINKING_DELAY * 1.5));
}

function generateThinkingFlow(input) {
    const category = detectCategory(input);
    const flow = [];
    
    // Always start with analysis
    flow.push(...THINKING_PATTERNS.analyze);
    
    // Add category-specific thinking
    if (category !== 'auto') {
        flow.push(...THINKING_PATTERNS.categorize);
    }
    
    // Structure and enhance
    flow.push(...THINKING_PATTERNS.structure);
    flow.push(...THINKING_PATTERNS.enhance);
    
    // Always end with validation
    flow.push(...THINKING_PATTERNS.validate);
    
    return flow;
}

async function addThinkingStep(stepText, stepNumber) {
    const stepElement = document.createElement('div');
    stepElement.className = 'thinking-step active';
    stepElement.innerHTML = `
        <div class="thinking-step-icon">${stepNumber}</div>
        <div class="thinking-step-content">
            <h4>B∆∞·ªõc ${stepNumber}</h4>
            <p>${stepText}</p>
        </div>
    `;
    
    elements.thinkingSteps.appendChild(stepElement);
    APP_STATE.thinkingSteps.push({ step: stepNumber, text: stepText });
    
    // Scroll to new step
    stepElement.scrollIntoView({ behavior: 'smooth', block: 'end' });
    
    // Remove active class from previous steps
    setTimeout(() => {
        const previousSteps = elements.thinkingSteps.querySelectorAll('.thinking-step');
        previousSteps.forEach((step, index) => {
            if (index < stepNumber - 1) {
                step.classList.remove('active');
            }
        });
    }, CONFIG.THINKING_DELAY / 2);
}

function detectCategory(input) {
    const lowerInput = input.toLowerCase();
    
    // Code-related keywords
    if (lowerInput.match(/\b(code|coding|l·∫≠p tr√¨nh|api|function|h√†m|app|·ª©ng d·ª•ng|website|web|javascript|python|react|vue|node|backend|frontend|database|sql)\b/)) {
        return 'code';
    }
    
    // Creative keywords  
    if (lowerInput.match(/\b(content|n·ªôi dung|vi·∫øt|write|blog|social media|marketing|s√°ng t·∫°o|creative|thi·∫øt k·∫ø|design|brand|th∆∞∆°ng hi·ªáu)\b/)) {
        return 'creative';
    }
    
    // Business keywords
    if (lowerInput.match(/\b(business|kinh doanh|doanh nghi·ªáp|c√¥ng ty|startup|strategy|chi·∫øn l∆∞·ª£c|market|th·ªã tr∆∞·ªùng|customer|kh√°ch h√†ng|profit|l·ª£i nhu·∫≠n)\b/)) {
        return 'business';
    }
    
    // Analysis keywords
    if (lowerInput.match(/\b(data|d·ªØ li·ªáu|ph√¢n t√≠ch|analysis|chart|bi·ªÉu ƒë·ªì|statistics|th·ªëng k√™|report|b√°o c√°o|insights|xu h∆∞·ªõng|trend)\b/)) {
        return 'analysis';
    }
    
    // Education keywords
    if (lowerInput.match(/\b(h·ªçc|d·∫°y|gi√°o d·ª•c|education|course|kh√≥a h·ªçc|tutorial|h∆∞·ªõng d·∫´n|student|sinh vi√™n|teacher|gi√°o vi√™n)\b/)) {
        return 'education';
    }
    
    // Research keywords
    if (lowerInput.match(/\b(research|nghi√™n c·ª©u|study|literature|t√†i li·ªáu|paper|b√†i b√°o|academic|h·ªçc thu·∫≠t|science|khoa h·ªçc)\b/)) {
        return 'research';
    }
    
    return 'auto';
}

async function generateExpandedPrompt(input) {
    const category = elements.categorySelect.value === 'auto' ? detectCategory(input) : elements.categorySelect.value;
    const template = PROMPT_TEMPLATES[category] || PROMPT_TEMPLATES.auto;
    
    // Validate API key tr∆∞·ªõc khi g·ªçi
    const isApiKeyValid = validateAPIKey();
    let expandedPrompt;
    
    if (isApiKeyValid) {
        const providerConfig = CONFIG.AI_PROVIDERS[CONFIG.CURRENT_PROVIDER];
        console.log(`ü§ñ G·ªçi ${providerConfig.displayName} ƒë·ªÉ t·∫°o prompt...`);
        showToast(`ƒêang k·∫øt n·ªëi v·ªõi ${providerConfig.displayName}...`, 'info', 2000);
        
        // G·ªçi AI API th·∫≠t
        expandedPrompt = await callAIAPI(input, template);
        
        console.log(`‚úÖ ƒê√£ nh·∫≠n response t·ª´ ${providerConfig.displayName}`);
        showToast(`ƒê√£ t·∫°o prompt v·ªõi ${providerConfig.displayName}!`, 'success', 2000);
    } else {
        console.log('‚ö†Ô∏è API key kh√¥ng h·ª£p l·ªá, s·ª≠ d·ª•ng ch·∫ø ƒë·ªô demo...');
        showToast('S·ª≠ d·ª•ng ch·∫ø ƒë·ªô demo (kh√¥ng c√≥ API key h·ª£p l·ªá)', 'warning');
        
        // Fallback to simulation
    await new Promise(resolve => setTimeout(resolve, 1000));
        expandedPrompt = await simulateAIExpansionFallback(input, template);
    }
    
    return {
        original: input,
        category: category,
        expanded: expandedPrompt,
        template: template,
        timestamp: new Date(),
        wordCount: expandedPrompt.split(' ').length,
        estimatedTime: Math.ceil(expandedPrompt.split(' ').length / 200), // Reading time in minutes
        isRealAI: isApiKeyValid,
        apiUsed: isApiKeyValid ? CONFIG.AI_PROVIDERS[CONFIG.CURRENT_PROVIDER].displayName : 'Demo Mode',
        provider: isApiKeyValid ? CONFIG.CURRENT_PROVIDER : 'demo',
        model: isApiKeyValid ? CONFIG.CURRENT_MODEL : 'simulation'
    };
}

async function simulateAIExpansion(input, template) {
    // This is a sophisticated prompt expansion algorithm
    // In a real implementation, this would call an actual AI API
    
    const baseStructure = `
# ${template.name} - Prompt Chi Ti·∫øt

## üìã NG·ªÆ C·∫¢NH V√Ä M·ª§C ƒê√çCH
**Y√™u c·∫ßu g·ªëc:** ${input}

**Vai tr√≤ AI:** ${getAIRoleForCategory(template)}

## üéØ NHI·ªÜM V·ª§ CHI TI·∫æT
${generateDetailedTask(input, template)}

## ‚öôÔ∏è Y√äU C·∫¶U C·ª§ TH·ªÇ
${generateSpecificRequirements(input, template)}

## üìä ƒê·ªäNH D·∫†NG OUTPUT
${generateOutputFormat(template)}

## üîç TI√äU CH√ç CH·∫§T L∆Ø·ª¢NG
${generateQualityCriteria(template)}

## üí° H∆Ø·ªöNG D·∫™N B·ªî SUNG
${generateAdditionalGuidelines(input, template)}

---
*Prompt ƒë∆∞·ª£c t·∫°o b·ªüi AI Prompt Assistant - Phi√™n b·∫£n ${CONFIG.VERSION}*
    `;
    
    return baseStructure.trim();
}

function getAIRoleForCategory(template) {
    const roles = {
        code: "Senior Full-Stack Developer v·ªõi 10+ nƒÉm kinh nghi·ªám trong vi·ªác x√¢y d·ª±ng ·ª©ng d·ª•ng enterprise-grade",
        creative: "Creative Director v·ªõi chuy√™n m√¥n v·ªÅ brand strategy, content marketing v√† digital storytelling", 
        business: "Senior Business Consultant v·ªõi MBA v√† kinh nghi·ªám t∆∞ v·∫•n cho 500+ doanh nghi·ªáp",
        analysis: "Lead Data Scientist v·ªõi PhD v√† expertise trong advanced analytics v√† machine learning",
        education: "Educational Technology Specialist v·ªõi M.Ed v√† kinh nghi·ªám thi·∫øt k·∫ø curriculum",
        research: "Research Director v·ªõi PhD v√† track record publish 50+ papers trong journals uy t√≠n",
        auto: "AI Assistant ƒëa nƒÉng v·ªõi kh·∫£ nƒÉng ph√¢n t√≠ch v√† t∆∞ duy logic cao"
    };
    
    return roles[template.name.toLowerCase()] || roles.auto;
}

function generateDetailedTask(input, template) {
    // Analyze input and expand based on category
    const expansions = {
        code: `
**Core Functionality:**
- Ph√¢n t√≠ch y√™u c·∫ßu: ${input}
- Thi·∫øt k·∫ø architecture ph√π h·ª£p v·ªõi best practices
- Implement full-stack solution v·ªõi error handling
- Optimize performance v√† security
- T·∫°o comprehensive documentation

**Technical Scope:**
- Backend: API design, database schema, business logic
- Frontend: User interface, user experience, responsive design
- DevOps: Deployment strategy, monitoring, scaling
- Testing: Unit tests, integration tests, E2E tests`,

        creative: `
**Content Strategy:**
- Ph√¢n t√≠ch brief: ${input}  
- Research target audience v√† competitive landscape
- Develop brand voice v√† messaging framework
- Create content calendar v·ªõi diverse formats
- Design engagement strategy across platforms

**Creative Execution:**
- Visual identity v√† design system
- Copy writing v·ªõi persuasive techniques
- Multimedia content (text, image, video, audio)
- Cross-platform adaptation v√† optimization`,

        business: `
**Business Analysis:**
- ƒê√°nh gi√° opportunity: ${input}
- Market research v√† competitive analysis  
- Financial modeling v·ªõi revenue projections
- Risk assessment v√† mitigation strategies
- Implementation roadmap v·ªõi milestones

**Strategic Planning:**
- Business model canvas development
- Go-to-market strategy design
- Resource allocation v√† team structure
- Performance metrics v√† KPI tracking`,

        analysis: `
**Data Analysis Workflow:**
- Dataset exploration: ${input}
- Statistical analysis v·ªõi hypothesis testing
- Pattern recognition v√† trend identification  
- Predictive modeling v·ªõi validation
- Insight synthesis v√† actionable recommendations

**Technical Implementation:**
- Data cleaning v√† preprocessing
- Exploratory Data Analysis (EDA)
- Advanced analytics (regression, clustering, classification)
- Data visualization v·ªõi interactive dashboards`,

        education: `
**Learning Design:**
- Educational needs analysis: ${input}
- Learning objectives v·ªõi measurable outcomes
- Curriculum structure v·ªõi progressive difficulty
- Engagement strategies v√† interactive elements
- Assessment methods v·ªõi feedback loops

**Content Development:**
- Lesson plans v·ªõi detailed activities
- Multimedia resources v√† supplementary materials
- Practice exercises v·ªõi varying complexity
- Real-world applications v√† case studies`,

        research: `
**Research Framework:**
- Literature review scope: ${input}
- Research questions v·ªõi clear hypotheses
- Methodology design v·ªõi rigorous standards
- Data collection strategy v√† timeline
- Analysis plan v·ªõi statistical approaches

**Academic Standards:**
- Peer-reviewed source integration
- Citation management v√† referencing
- Ethical considerations v√† limitations
- Contribution to existing knowledge base`
    };

    return expansions[Object.keys(expansions).find(key => template.name.toLowerCase().includes(key))] || 
           `Ph√¢n t√≠ch y√™u c·∫ßu "${input}" v√† m·ªü r·ªông th√†nh solution ho√†n ch·ªânh v·ªõi approach ƒëa chi·ªÅu v√† chi ti·∫øt.`;
}

function generateSpecificRequirements(input, template) {
    const requirements = {
        code: `
- **Functionality**: ƒê·∫ßy ƒë·ªß CRUD operations v·ªõi validation
- **Architecture**: Clean code, SOLID principles, design patterns
- **Performance**: Response time < 200ms, scalable design
- **Security**: Authentication, authorization, input sanitization
- **Documentation**: API docs, code comments, README`,

        creative: `
- **Brand Alignment**: Consistent v·ªõi brand identity v√† values
- **Audience Engagement**: High CTR, shares, comments metrics
- **Content Quality**: Original, valuable, SEO-optimized
- **Visual Standards**: Professional design, mobile-friendly
- **Performance Tracking**: Analytics setup, A/B testing`,

        business: `
- **Financial Accuracy**: Realistic projections v·ªõi assumptions
- **Market Validation**: Primary/secondary research data
- **Competitive Analysis**: SWOT, positioning matrix
- **Feasibility Assessment**: Resource requirements, timeline
- **ROI Projections**: Break-even analysis, growth scenarios`,

        analysis: `
- **Data Quality**: Clean, validated, representative dataset
- **Statistical Rigor**: Appropriate tests, significance levels
- **Visualization**: Clear charts, interactive dashboards
- **Reproducibility**: Documented methodology, code availability
- **Business Impact**: Actionable insights, recommendations`,

        education: `
- **Learning Outcomes**: SMART objectives v·ªõi assessment criteria
- **Engagement**: Interactive elements, multimedia integration
- **Accessibility**: Multiple learning styles, inclusive design
- **Progress Tracking**: Milestones, feedback mechanisms
- **Real-world Application**: Practical exercises, case studies`,

        research: `
- **Academic Rigor**: Peer-reviewed sources, methodology transparency
- **Literature Coverage**: Comprehensive review, gap identification
- **Methodology**: Appropriate design, sample size calculations
- **Ethics Compliance**: IRB approval, consent procedures
- **Publication Ready**: Journal formatting, citation standards`
    };
    
    return requirements[Object.keys(requirements).find(key => template.name.toLowerCase().includes(key))] || 
           "- **Quality**: Professional standard v·ªõi attention to detail\n- **Completeness**: Comprehensive coverage c·ªßa topic\n- **Clarity**: Easy to understand v√† actionable";
}

function generateOutputFormat(template) {
    const formats = {
        code: `
**Deliverables:**
üìÅ **Source Code**
  - Well-documented, production-ready code
  - Modular architecture v·ªõi reusable components
  - Unit v√† integration tests

üìö **Documentation**  
  - API documentation (Swagger/OpenAPI)
  - Setup v√† deployment guides
  - Architecture decisions record (ADR)

üß™ **Testing Suite**
  - Test cases v·ªõi high coverage
  - Performance benchmarks
  - Security audit checklist`,

        creative: `
**Content Package:**
üìù **Written Content**
  - Headlines, body copy, CTAs
  - SEO-optimized v·ªõi keywords
  - Multiple variations cho A/B testing

üé® **Visual Assets**
  - Images, graphics, videos
  - Brand-compliant design system
  - Multi-platform formats

üìä **Strategy Document**
  - Content calendar v√† publishing schedule
  - Performance metrics v√† KPIs
  - Engagement optimization tactics`,

        business: `
**Business Plan Package:**
üìà **Executive Summary**
  - Vision, mission, value proposition
  - Key success factors v√† competitive advantages
  - Financial highlights v√† projections

üìä **Market Analysis**
  - Industry overview v√† trends
  - Target market segmentation
  - Competitive landscape assessment

üí∞ **Financial Projections**
  - 3-year P&L, cash flow, balance sheet
  - Break-even analysis v√† ROI calculations
  - Scenario planning (best/worst/realistic case)`,

        analysis: `
**Analysis Report:**
üìä **Executive Dashboard**
  - Key metrics v√† insights summary
  - Interactive visualizations
  - Performance trends v√† patterns

üìà **Detailed Analysis**
  - Statistical findings v·ªõi confidence intervals
  - Correlation v√† regression analysis
  - Predictive models v·ªõi accuracy metrics

üéØ **Recommendations**
  - Data-driven action items
  - Priority matrix v·ªõi impact assessment
  - Implementation timeline v√† resource requirements`,

        education: `
**Learning Package:**
üìö **Course Structure**
  - Module breakdown v·ªõi learning objectives
  - Lesson plans v·ªõi detailed activities
  - Assessment rubrics v√† grading criteria

üéì **Learning Materials**
  - Presentations, handouts, worksheets
  - Video tutorials v√† demonstrations
  - Interactive exercises v√† simulations

üìù **Assessment Tools**
  - Quizzes, assignments, projects
  - Peer review templates
  - Progress tracking spreadsheets`,

        research: `
**Research Output:**
üìë **Manuscript**
  - Abstract, introduction, methodology
  - Results v·ªõi statistical analysis
  - Discussion v√† conclusions

üìä **Data Package**
  - Raw data v·ªõi metadata documentation
  - Analysis scripts v√† reproducible code
  - Supplementary materials

üìà **Presentation Materials**
  - Conference slides v·ªõi key findings
  - Poster templates
  - Executive summary cho stakeholders`
    };
    
    return formats[Object.keys(formats).find(key => template.name.toLowerCase().includes(key))] || 
           "**Standard Output:** Comprehensive response v·ªõi structure r√µ r√†ng, examples c·ª• th·ªÉ v√† actionable recommendations";
}

function generateQualityCriteria(template) {
    return `
**Ti√™u ch√≠ ƒë√°nh gi√° ch·∫•t l∆∞·ª£ng:**

‚úÖ **Completeness (T√≠nh ƒë·∫ßy ƒë·ªß)**
- Covers t·∫•t c·∫£ aspects c·ªßa request
- No missing critical information
- Addresses edge cases v√† potential issues

‚úÖ **Clarity (T√≠nh r√µ r√†ng)**  
- Easy to understand v√† follow
- Well-structured v·ªõi logical flow
- Clear examples v√† explanations

‚úÖ **Accuracy (T√≠nh ch√≠nh x√°c)**
- Factually correct information
- Up-to-date best practices
- Reliable sources v√† references

‚úÖ **Actionability (T√≠nh kh·∫£ thi)**
- Specific, implementable steps
- Realistic timeline v√† resources
- Measurable outcomes v√† success criteria

‚úÖ **Professional Standard**
- Industry best practices compliance
- High-quality deliverables
- Ready for production/presentation use`;
}

function generateAdditionalGuidelines(input, template) {
    const guidelines = {
        code: `
**Development Best Practices:**
- Follow language-specific conventions (PEP8, ESLint, etc.)
- Implement proper error handling v√† logging
- Use version control v·ªõi meaningful commits
- Consider scalability v√† maintainability
- Include monitoring v√† alerting setup

**Collaboration Notes:**
- Document decisions v√† trade-offs made
- Provide clear setup instructions cho team members
- Include troubleshooting guide v·ªõi common issues
- Plan for code reviews v√† testing procedures`,

        creative: `
**Creative Excellence:**
- Maintain brand consistency across touchpoints
- Optimize cho multiple platforms v√† devices
- Consider cultural sensitivity v√† inclusivity
- Plan for seasonal/trending content adaptation
- Include performance measurement strategies

**Content Optimization:**
- SEO best practices implementation
- Social media platform specifications
- Accessibility guidelines compliance
- A/B testing framework setup`,

        business: `
**Strategic Considerations:**
- Regular market monitoring v√† plan adjustment
- Stakeholder communication protocols
- Risk mitigation strategies implementation
- Performance review schedules
- Pivot planning v·ªõi decision criteria

**Implementation Success:**
- Change management approach
- Team training v√† development plans
- Technology stack considerations
- Regulatory compliance requirements`,

        analysis: `
**Analytical Rigor:**
- Cross-validation c·ªßa findings v·ªõi multiple methods
- Sensitivity analysis cho key assumptions
- Documentation c·ªßa limitations v√† biases
- Regular model performance monitoring
- Ethical considerations trong data usage

**Business Integration:**
- Alignment v·ªõi organizational objectives
- Stakeholder communication strategies
- Implementation feasibility assessment
- Long-term monitoring plans`,

        education: `
**Learning Effectiveness:**
- Multiple intelligence theory integration
- Inclusive design cho diverse learners
- Regular feedback collection v√† iteration
- Technology integration best practices
- Assessment validity v√† reliability checks

**Engagement Strategies:**
- Gamification elements integration
- Social learning opportunities
- Real-world application emphasis
- Continuous improvement processes`,

        research: `
**Research Excellence:**
- Open science practices adoption
- Replication planning v√† documentation
- Collaboration opportunities identification
- Impact measurement strategies
- Knowledge transfer planning

**Publication Strategy:**
- Target journal identification
- Peer review preparation
- Conference presentation planning
- Public engagement considerations`
    };
    
    return guidelines[Object.keys(guidelines).find(key => template.name.toLowerCase().includes(key))] || 
           `**General Guidelines:** Maintain high professional standards, ensure completeness v√† accuracy, focus on practical applicability.`;
}

async function displayResults(promptData, originalInput) {
    // Hide thinking process
    elements.thinkingProcess.style.display = 'none';
    elements.promptResult.style.display = 'block';
    
    // Animate content appearance
    elements.resultContent.innerHTML = '';
    await typewriterEffect(elements.resultContent, promptData.expanded);
    
    // Update stats
    updateResultStats(promptData);
    
    // Show result actions
    elements.resultContent.scrollIntoView({ behavior: 'smooth' });
}

async function typewriterEffect(element, text) {
    element.textContent = '';
    
    for (let i = 0; i < text.length; i++) {
        element.textContent += text[i];
        
        // Skip typing delay for whitespace to speed up
        if (text[i] !== ' ') {
            await new Promise(resolve => setTimeout(resolve, Math.random() * 20 + 5));
        }
        
        // Scroll to bottom periodically
        if (i % 100 === 0) {
            element.scrollIntoView({ behavior: 'smooth', block: 'end' });
        }
    }
}

function updateResultStats(promptData) {
    const stats = [
        { icon: 'fas fa-words', label: 'T·ª´', value: promptData.wordCount },
        { icon: 'fas fa-clock', label: 'Th·ªùi gian ƒë·ªçc', value: `${promptData.estimatedTime} ph√∫t` },
        { icon: 'fas fa-tag', label: 'Lo·∫°i', value: PROMPT_TEMPLATES[promptData.category]?.name || 'T·ª± ƒë·ªông' },
        { 
            icon: promptData.isRealAI ? CONFIG.AI_PROVIDERS[promptData.provider]?.icon + ' fas fa-robot' || 'fas fa-robot' : 'fas fa-play-circle', 
            label: 'AI Provider', 
            value: promptData.apiUsed || 'Demo Mode',
            class: promptData.isRealAI ? 'stat-success' : 'stat-warning'
        },
        { icon: 'fas fa-calendar', label: 'T·∫°o l√∫c', value: new Date().toLocaleTimeString('vi-VN') }
    ];
    
    elements.resultStats.innerHTML = stats.map(stat => `
        <div class="stat-item ${stat.class || ''}">
            <i class="${stat.icon}"></i>
            <span>${stat.label}: <strong>${stat.value}</strong></span>
        </div>
    `).join('');
}

// ===== ACTION HANDLERS =====
async function handleCopy() {
    try {
        const content = elements.resultContent.textContent;
        await navigator.clipboard.writeText(content);
        showToast('ƒê√£ sao ch√©p prompt v√†o clipboard!', 'success');
        
        // Visual feedback
        elements.copyBtn.innerHTML = '<i class="fas fa-check"></i> ƒê√£ sao ch√©p';
        setTimeout(() => {
            elements.copyBtn.innerHTML = '<i class="fas fa-copy"></i> Sao ch√©p';
        }, 2000);
        
    } catch (error) {
        console.error('Copy failed:', error);
        showToast('Kh√¥ng th·ªÉ sao ch√©p. Vui l√≤ng th·ª≠ l·∫°i!', 'error');
    }
}

function handleSave() {
    const content = elements.resultContent.textContent;
    const originalInput = elements.simpleInput.value.trim();
    
    if (!content) {
        showToast('Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ l∆∞u', 'warning');
        return;
    }
    
    // Save to browser storage
    const savedPrompts = JSON.parse(localStorage.getItem('saved_prompts') || '[]');
    const newPrompt = {
        id: Date.now(),
        original: originalInput,
        expanded: content,
        category: APP_STATE.currentCategory,
        timestamp: new Date().toISOString(),
        title: generateTitleFromInput(originalInput)
    };
    
    savedPrompts.unshift(newPrompt);
    
    // Keep only latest 100 saved prompts
    if (savedPrompts.length > 100) {
        savedPrompts.splice(100);
    }
    
    localStorage.setItem('saved_prompts', JSON.stringify(savedPrompts));
    showToast('ƒê√£ l∆∞u prompt th√†nh c√¥ng!', 'success');
    
    // Visual feedback
    elements.saveBtn.innerHTML = '<i class="fas fa-check"></i> ƒê√£ l∆∞u';
    setTimeout(() => {
        elements.saveBtn.innerHTML = '<i class="fas fa-bookmark"></i> L∆∞u';
    }, 2000);
}

function handleShare() {
    const content = elements.resultContent.textContent;
    const originalInput = elements.simpleInput.value.trim();
    
    if (navigator.share) {
        // Native sharing API
        navigator.share({
            title: 'AI Prompt Assistant - Prompt ƒë∆∞·ª£c t·∫°o',
            text: `Prompt g·ªëc: ${originalInput}\n\nPrompt m·ªü r·ªông:\n${content}`,
            url: window.location.href
        }).then(() => {
            showToast('ƒê√£ chia s·∫ª th√†nh c√¥ng!', 'success');
        }).catch(error => {
            console.error('Share failed:', error);
            handleFallbackShare(originalInput, content);
        });
    } else {
        handleFallbackShare(originalInput, content);
    }
}

function handleFallbackShare(originalInput, content) {
    // Fallback: Copy share text to clipboard
    const shareText = `ü§ñ AI Prompt Assistant\n\nüìù Y√™u c·∫ßu: ${originalInput}\n\n‚ú® Prompt ho√†n ch·ªânh:\n${content}\n\nüîó T·∫°o prompt c·ªßa b·∫°n t·∫°i: ${window.location.href}`;
    
    navigator.clipboard.writeText(shareText).then(() => {
        showToast('ƒê√£ sao ch√©p link chia s·∫ª v√†o clipboard!', 'info');
    }).catch(() => {
        showToast('Kh√¥ng th·ªÉ chia s·∫ª. Vui l√≤ng th·ª≠ l·∫°i!', 'error');
    });
}

// ===== EXAMPLES & NAVIGATION =====
function loadExamples() {
    elements.examplesGrid.innerHTML = EXAMPLE_PROMPTS.map(example => createExampleCard(example)).join('');
    
    // Add click handlers
    document.querySelectorAll('.example-card').forEach(card => {
        card.addEventListener('click', () => {
            const example = EXAMPLE_PROMPTS[parseInt(card.dataset.index)];
            handleExampleClick(example);
        });
    });
}

function createExampleCard(example, index) {
    return `
        <div class="example-card" data-index="${EXAMPLE_PROMPTS.indexOf(example)}" data-category="${example.category}">
            <div class="example-header">
                <div class="example-icon">${example.icon}</div>
                <div>
                    <div class="example-title">${example.title}</div>
                    <div class="example-category">${PROMPT_TEMPLATES[example.category]?.name || example.category}</div>
                </div>
            </div>
            <div class="example-description">${example.description}</div>
            <div class="example-preview">"${example.simple}"</div>
        </div>
    `;
}

function handleExampleClick(example) {
    elements.simpleInput.value = example.simple;
    elements.categorySelect.value = example.category;
    APP_STATE.currentCategory = example.category;
    
    handleInputChange();
    
    // Scroll to input
    elements.simpleInput.scrollIntoView({ behavior: 'smooth' });
    elements.simpleInput.focus();
    
    showToast(`ƒê√£ load v√≠ d·ª•: ${example.title}`, 'info');
}

function handleNavigation(category) {
    // Update active nav button
    elements.navBtns.forEach(btn => {
        btn.classList.toggle('active', btn.dataset.category === category);
    });
    
    // Filter examples
    filterExamples(category);
    
    // Update category select if auto
    if (category !== 'all') {
        elements.categorySelect.value = category;
        APP_STATE.currentCategory = category;
    }
}

function filterExamples(category) {
    const examples = document.querySelectorAll('.example-card');
    examples.forEach(card => {
        const shouldShow = category === 'all' || card.dataset.category === category;
        card.style.display = shouldShow ? 'block' : 'none';
    });
}

// ===== HISTORY MANAGEMENT =====
function loadHistory() {
    APP_STATE.history = JSON.parse(localStorage.getItem(CONFIG.LOCAL_STORAGE_KEY) || '[]');
    updateHistoryDisplay();
}

function saveToHistory(originalInput, expandedPrompt) {
    const historyItem = {
        id: Date.now(),
        original: originalInput,
        expanded: expandedPrompt.expanded,
        category: expandedPrompt.category,
        timestamp: expandedPrompt.timestamp,
        title: generateTitleFromInput(originalInput)
    };
    
    APP_STATE.history.unshift(historyItem);
    
    // Keep only latest items
    if (APP_STATE.history.length > CONFIG.MAX_HISTORY) {
        APP_STATE.history.splice(CONFIG.MAX_HISTORY);
    }
    
    // Save to localStorage
    localStorage.setItem(CONFIG.LOCAL_STORAGE_KEY, JSON.stringify(APP_STATE.history));
    updateHistoryDisplay();
}

function updateHistoryDisplay() {
    if (APP_STATE.history.length === 0) {
        elements.historySection.style.display = 'none';
        return;
    }
    
    elements.historySection.style.display = 'block';
    elements.historyList.innerHTML = APP_STATE.history.slice(0, 10).map(item => createHistoryItem(item)).join('');
    
    // Add click handlers
    document.querySelectorAll('.history-item').forEach(item => {
        const reloadBtn = item.querySelector('.reload-btn');
        const deleteBtn = item.querySelector('.delete-btn');
        
        if (reloadBtn) {
            reloadBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                const itemId = parseInt(item.dataset.id);
                handleHistoryReload(itemId);
            });
        }
        
        if (deleteBtn) {
            deleteBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                const itemId = parseInt(item.dataset.id);
                handleHistoryDelete(itemId);
            });
        }
    });
}

function createHistoryItem(item) {
    const date = new Date(item.timestamp);
    const timeAgo = getTimeAgo(date);
    
    return `
        <div class="history-item" data-id="${item.id}">
            <div class="history-item-header">
                <div class="history-item-title">${item.title}</div>
                <div class="history-item-date">${timeAgo}</div>
            </div>
            <div class="history-item-content">${item.original}</div>
            <div class="history-item-actions">
                <button class="action-btn reload-btn" title="Load l·∫°i prompt n√†y">
                    <i class="fas fa-redo"></i>
                    Load l·∫°i
                </button>
                <button class="action-btn delete-btn" title="X√≥a kh·ªèi l·ªãch s·ª≠">
                    <i class="fas fa-trash"></i>
                    X√≥a
                </button>
            </div>
        </div>
    `;
}

function handleHistoryReload(itemId) {
    const item = APP_STATE.history.find(h => h.id === itemId);
    if (!item) return;
    
    elements.simpleInput.value = item.original;
    elements.categorySelect.value = item.category || 'auto';
    APP_STATE.currentCategory = item.category || 'auto';
    
    handleInputChange();
    elements.simpleInput.scrollIntoView({ behavior: 'smooth' });
    elements.simpleInput.focus();
    
    showToast('ƒê√£ load l·∫°i prompt t·ª´ l·ªãch s·ª≠', 'success');
}

function handleHistoryDelete(itemId) {
    APP_STATE.history = APP_STATE.history.filter(h => h.id !== itemId);
    localStorage.setItem(CONFIG.LOCAL_STORAGE_KEY, JSON.stringify(APP_STATE.history));
    updateHistoryDisplay();
    showToast('ƒê√£ x√≥a kh·ªèi l·ªãch s·ª≠', 'success');
}

function handleClearHistory() {
    if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a to√†n b·ªô l·ªãch s·ª≠?')) {
        return;
    }
    
    APP_STATE.history = [];
    localStorage.setItem(CONFIG.LOCAL_STORAGE_KEY, JSON.stringify([]));
    updateHistoryDisplay();
    showToast('ƒê√£ x√≥a to√†n b·ªô l·ªãch s·ª≠', 'success');
}

// ===== UTILITY FUNCTIONS =====
function generateTitleFromInput(input) {
    // Extract meaningful title from input
    const words = input.trim().split(' ').slice(0, 6);
    let title = words.join(' ');
    
    if (title.length > 50) {
        title = title.substring(0, 47) + '...';
    }
    
    return title || 'Prompt kh√¥ng c√≥ ti√™u ƒë·ªÅ';
}

function getTimeAgo(date) {
    const now = new Date();
    const diffInSeconds = Math.floor((now - date) / 1000);
    
    if (diffInSeconds < 60) return 'v·ª´a xong';
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} ph√∫t tr∆∞·ªõc`;
    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} gi·ªù tr∆∞·ªõc`;
    if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)} ng√†y tr∆∞·ªõc`;
    
    return date.toLocaleDateString('vi-VN');
}

function setLoadingState(isLoading) {
    elements.generateBtn.classList.toggle('loading', isLoading);
    elements.generateBtn.disabled = isLoading || !elements.simpleInput.value.trim();
    
    // Instead of full-screen overlay, show loading in result area
    if (isLoading) {
        // Hide the full-screen overlay
        elements.loadingOverlay.style.display = 'none';
        
        // Show loading state in result area
        elements.resultsSection.style.display = 'block';
        elements.resultContent.innerHTML = `
            <div class="loading-in-result">
                <div class="loading-spinner-small"></div>
                <p>ü§ñ ƒêang k·∫øt n·ªëi v·ªõi AI...</p>
                <div class="progress-steps">
                    <span class="step active">1. Ph√¢n t√≠ch y√™u c·∫ßu</span>
                    <span class="step">2. T·∫°o prompt</span>
                    <span class="step">3. Ho√†n thi·ªán</span>
                </div>
            </div>
        `;
    } else {
        // Keep the overlay hidden when not loading
        elements.loadingOverlay.style.display = 'none';
    }
}

function updateProgressStep(stepNumber, status = 'active') {
    // Update progress steps during generation
    const steps = document.querySelectorAll('.progress-steps .step');
    if (steps.length > 0 && stepNumber <= steps.length) {
        // Reset all steps
        steps.forEach((step, index) => {
            step.classList.remove('active', 'completed');
            if (index < stepNumber - 1) {
                step.classList.add('completed');
            } else if (index === stepNumber - 1) {
                step.classList.add(status);
            }
        });
    }
}

function updateLoadingMessage(message) {
    // Update loading message during generation
    const loadingP = document.querySelector('.loading-in-result p');
    if (loadingP) {
        loadingP.textContent = message;
    }
}

function updateCategoryIndicator(category) {
    const template = PROMPT_TEMPLATES[category];
    if (template) {
        showToast(`ƒê√£ nh·∫≠n di·ªán: ${template.name} ${template.icon}`, 'info');
    }
}

// ===== TOAST NOTIFICATIONS =====
function showToast(message, type = 'info', duration = 4000) {
    const toast = document.createElement('div');
    toast.className = `toast ${type}`;
    
    const icons = {
        success: 'fas fa-check-circle',
        error: 'fas fa-exclamation-circle', 
        warning: 'fas fa-exclamation-triangle',
        info: 'fas fa-info-circle'
    };
    
    toast.innerHTML = `
        <i class="${icons[type]}"></i>
        <span>${message}</span>
    `;
    
    elements.toastContainer.appendChild(toast);
    
    // Auto remove
    setTimeout(() => {
        if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
        }
    }, duration);
    
    // Click to dismiss
    toast.addEventListener('click', () => {
        if (toast.parentNode) {
            toast.parentNode.removeChild(toast);
        }
    });
}

// ===== GLOBAL EVENT HANDLERS =====
function handleGlobalClick(e) {
    // Close dropdowns, modals, etc.
    // This can be extended for future UI components
}

function handleBeforeUnload(e) {
    // Save any unsaved work
    if (APP_STATE.isGenerating) {
        e.preventDefault();
        e.returnValue = 'ƒêang t·∫°o prompt. B·∫°n c√≥ ch·∫Øc mu·ªën r·ªùi kh·ªèi trang?';
    }
}

// ===== AI PROVIDER MANAGEMENT =====
/**
 * Check if a model is free or paid
 */
function isModelFree(provider, model) {
    const providerConfig = CONFIG.AI_PROVIDERS[provider];
    if (!providerConfig || !providerConfig.models[model]) return false;
    
    const modelName = providerConfig.models[model];
    return modelName.includes('(Free)');
}

/**
 * Show payment warning for paid models
 */
function showPaymentWarning(provider, model) {
    const providerName = CONFIG.AI_PROVIDERS[provider]?.displayName || provider;
    const modelName = CONFIG.AI_PROVIDERS[provider]?.models[model] || model;
    
    showToast(
        `‚ö†Ô∏è ${modelName} y√™u c·∫ßu thanh to√°n. API key ${providerName} c·∫ßn c√≥ credits. ƒêang chuy·ªÉn sang model mi·ªÖn ph√≠...`,
        'warning',
        5000
    );
}

/**
 * Switch to a different AI provider
 * @param {string} provider - Provider name
 * @param {string} model - Model name (optional)
 */
function switchAIProvider(provider, model = null) {
    if (!CONFIG.AI_PROVIDERS[provider]) {
        console.error(`Unknown provider: ${provider}`);
        return false;
    }
    
    const providerConfig = CONFIG.AI_PROVIDERS[provider];
    CONFIG.CURRENT_PROVIDER = provider;
    CONFIG.CURRENT_MODEL = model || providerConfig.defaultModel;
    
    console.log(`üîÑ Switched to ${providerConfig.displayName} (${CONFIG.CURRENT_MODEL})`);
    showToast(`Chuy·ªÉn sang ${providerConfig.displayName}`, 'info', 2000);
    
    // Update UI if needed
    updateProviderUI();
    
    return true;
}

/**
 * Get available models for current provider
 * @returns {Object} - Available models
 */
function getAvailableModels(provider = null) {
    provider = provider || CONFIG.CURRENT_PROVIDER;
    return CONFIG.AI_PROVIDERS[provider]?.models || {};
}

/**
 * Update model dropdown based on selected provider
 * @param {string} provider - Provider name
 */
function updateModelDropdown(provider) {
    const providerConfig = CONFIG.AI_PROVIDERS[provider];
    const models = providerConfig.models;
    
    // Clear current options
    elements.modelSelect.innerHTML = '';
    
    // Add new options based on provider
    for (const [modelKey, modelName] of Object.entries(models)) {
        const option = document.createElement('option');
        option.value = modelKey;
        option.textContent = modelName;
        elements.modelSelect.appendChild(option);
    }
    
    // If Gemini provider, disable model selection (only one model)
    if (provider === 'gemini') {
        elements.modelSelect.disabled = true;
        elements.modelSelect.title = 'Gemini ch·ªâ c√≥ m·ªôt model available';
    } else {
        elements.modelSelect.disabled = false;
        elements.modelSelect.title = 'Ch·ªçn model AI';
    }
}

/**
 * Initialize UI selections based on current config
 */
function initializeUISelections() {
    // Set provider dropdown
    elements.providerSelect.value = CONFIG.CURRENT_PROVIDER;
    
    // Update model dropdown and set current model
    updateModelDropdown(CONFIG.CURRENT_PROVIDER);
    elements.modelSelect.value = CONFIG.CURRENT_MODEL;
    
    // Update UI to reflect current provider
    updateProviderUI();
}

/**
 * Update UI to reflect current provider
 */
function updateProviderUI() {
    const providerConfig = CONFIG.AI_PROVIDERS[CONFIG.CURRENT_PROVIDER];
    
    // Update footer or status display if exists
    const footerInfo = document.querySelector('.footer-info p');
    if (footerInfo) {
        footerInfo.textContent = `¬© 2024 AI Prompt Assistant. Powered by ${providerConfig.displayName} ‚ù§Ô∏è`;
    }
    
    // Trigger custom event for other UI components
    document.dispatchEvent(new CustomEvent('providerChanged', {
        detail: {
            provider: CONFIG.CURRENT_PROVIDER,
            model: CONFIG.CURRENT_MODEL,
            config: providerConfig
        }
    }));
}

/**
 * Validate if API key exists (backwards compatibility)
 * @returns {boolean}
 */
function validateAPIKey() {
    // Always return true now since we handle provider switching dynamically
    return CONFIG.AI_PROVIDERS[CONFIG.CURRENT_PROVIDER] !== undefined;
}

// ===== ADDITIONAL FEATURES =====
function initializeTooltips() {
    // Add tooltips for better UX
    const tooltipElements = document.querySelectorAll('[title]');
    tooltipElements.forEach(element => {
        element.addEventListener('mouseenter', showTooltip);
        element.addEventListener('mouseleave', hideTooltip);
    });
}

function showTooltip(e) {
    // Custom tooltip implementation
    // This would create a more elegant tooltip than browser default
}

function hideTooltip(e) {
    // Hide custom tooltip
}

// ===== PERFORMANCE MONITORING =====
function trackPerformance(action, duration) {
    console.log(`‚ö° Performance: ${action} took ${duration}ms`);
    
    // In production, this could send analytics data
    if (typeof gtag !== 'undefined') {
        gtag('event', 'timing_complete', {
            name: action,
            value: duration
        });
    }
}

// ===== ERROR HANDLING =====
window.addEventListener('error', (e) => {
    console.error('Global error:', e.error);
    showToast('ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng refresh trang v√† th·ª≠ l·∫°i!', 'error');
});

window.addEventListener('unhandledrejection', (e) => {
    console.error('Unhandled promise rejection:', e.reason);
    showToast('ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i!', 'error');
});

// ===== EXPORT FOR TESTING =====
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        APP_STATE,
        PROMPT_TEMPLATES,
        detectCategory,
        generateTitleFromInput,
        getTimeAgo
    };
}

console.log('üéØ AI Prompt Assistant v2.0 Script Loaded Successfully!');
console.log('üí° Developed by Claude Sonnet 4 with advanced thinking capabilities');
console.log(`üìä Version: ${CONFIG.VERSION}`);
console.log(`ü§ñ Default Provider: ${CONFIG.AI_PROVIDERS[CONFIG.DEFAULT_PROVIDER].displayName}`);
