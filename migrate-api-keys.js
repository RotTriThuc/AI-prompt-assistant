/**
 * 🔄 API Key Migration Script
 * Tự động mã hóa API keys từ proxy-server.js và tạo file .env
 * Tạo bởi Claude Sonnet 4.5 - Tech Lead Security Expert
 */

const fs = require('fs');
const path = require('path');
const { encryptAPIKey, maskAPIKey, generateNewEncryptionKey } = require('./encryption-utils');

// ===== HARDCODED API KEYS (từ proxy-server.js) =====
const CURRENT_API_KEYS = {
    gemini: 'AIzaSyDAnBQKPWkJigLq_Hiy4PmqPvLkdW2AQAo',
    openrouter: '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',
    groq: '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',
    openai: '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'
};

/**
 * Main migration function
 */
async function migrateAPIKeys() {
    console.log('\n🔄 API Key Migration Tool\n');
    console.log('════════════════════════════════════════════════════════════════\n');
    
    try {
        // Step 1: Generate new encryption key
        console.log('📝 Step 1: Generating encryption key...');
        const encryptionKey = generateNewEncryptionKey();
        console.log('✅ Encryption key generated:', maskAPIKey(encryptionKey));
        console.log('');
        
        // Step 2: Encrypt all API keys
        console.log('🔐 Step 2: Encrypting API keys...\n');
        const encryptedKeys = {};
        
        for (const [provider, apiKey] of Object.entries(CURRENT_API_KEYS)) {
            try {
                const encrypted = encryptAPIKey(apiKey, encryptionKey);
                encryptedKeys[provider] = encrypted;
                console.log(`✅ ${provider.toUpperCase().padEnd(12)} - Encrypted successfully`);
                console.log(`   Original (masked): ${maskAPIKey(apiKey)}`);
                console.log(`   Encrypted: ${encrypted.substring(0, 50)}...`);
                console.log('');
            } catch (error) {
                console.error(`❌ Failed to encrypt ${provider}:`, error.message);
            }
        }
        
        // Step 3: Create .env file
        console.log('📝 Step 3: Creating .env file...');
        const envContent = generateEnvFile(encryptionKey, encryptedKeys);
        
        // Backup existing .env if exists
        if (fs.existsSync('.env')) {
            const backupFile = `.env.backup.${Date.now()}`;
            fs.copyFileSync('.env', backupFile);
            console.log(`⚠️  Existing .env backed up to: ${backupFile}`);
        }
        
        // Write new .env file
        fs.writeFileSync('.env', envContent);
        console.log('✅ .env file created successfully\n');
        
        // Step 4: Show summary
        console.log('════════════════════════════════════════════════════════════════');
        console.log('🎉 Migration completed successfully!\n');
        console.log('📋 Summary:');
        console.log('   • Encryption key: Generated and saved to .env');
        console.log('   • API keys encrypted:', Object.keys(encryptedKeys).length);
        console.log('   • Configuration file: .env created\n');
        
        console.log('⚠️  IMPORTANT SECURITY STEPS:\n');
        console.log('   1. ✅ .env file has been created with encrypted API keys');
        console.log('   2. ✅ .gitignore has been updated to exclude .env');
        console.log('   3. 🔴 DELETE hardcoded API keys from proxy-server.js');
        console.log('   4. 🔴 Update proxy-server.js to use encrypted keys from .env');
        console.log('   5. 🔴 NEVER commit .env file to Git\n');
        
        console.log('💡 Next steps:');
        console.log('   • Run: node update-proxy-server.js (to update proxy-server.js)');
        console.log('   • Test: npm start (to verify API keys work)');
        console.log('   • Clean: Remove hardcoded keys from old code\n');
        
        console.log('════════════════════════════════════════════════════════════════\n');
        
        return true;
        
    } catch (error) {
        console.error('\n❌ Migration failed:', error.message);
        console.error(error.stack);
        return false;
    }
}

/**
 * Generate .env file content
 */
function generateEnvFile(encryptionKey, encryptedKeys) {
    return `# 🔐 API Key Configuration (Encrypted)
# Auto-generated by migrate-api-keys.js
# Generated: ${new Date().toISOString()}
# ===================================
#
# ⚠️ CRITICAL SECURITY WARNINGS:
# 1. NEVER commit this file to Git (.gitignore is configured)
# 2. Keep ENCRYPTION_KEY absolutely secret
# 3. If ENCRYPTION_KEY is lost, all encrypted keys are unrecoverable
# 4. Regenerate all API keys if this file is compromised
#
# ===================================

# Encryption Key (KEEP THIS SECRET!)
ENCRYPTION_KEY="${encryptionKey}"

# Node Environment
NODE_ENV=development

# Server Configuration
PORT=3001
HOST=localhost

# ===== ENCRYPTED API KEYS =====
# These API keys are encrypted using AES-256-CBC
# They will be automatically decrypted by proxy-server.js

# Google Gemini API Key (Encrypted)
GEMINI_API_KEY_ENCRYPTED="${encryptedKeys.gemini || ''}"

# OpenRouter API Key (Encrypted)
OPENROUTER_API_KEY_ENCRYPTED="${encryptedKeys.openrouter || ''}"

# Groq API Key (Encrypted)
GROQ_API_KEY_ENCRYPTED="${encryptedKeys.groq || ''}"

# OpenAI API Key (Encrypted) - Legacy
OPENAI_API_KEY_ENCRYPTED="${encryptedKeys.openai || ''}"

# ===== API CONFIGURATION =====

# Gemini Configuration
GEMINI_MODEL="gemini-2.0-flash-exp"
GEMINI_MAX_TOKENS=2000
GEMINI_TEMPERATURE=0.7

# OpenRouter Configuration
OPENROUTER_MODEL="deepseek/deepseek-chat-v3.1:free"
OPENROUTER_MAX_TOKENS=2000
OPENROUTER_TEMPERATURE=0.7

# Groq Configuration
GROQ_MODEL="llama-3.1-8b-instant"
GROQ_MAX_TOKENS=2000
GROQ_TEMPERATURE=0.7

# ===== CORS CONFIGURATION =====
ALLOWED_ORIGINS="http://localhost:3001,http://localhost:3000,http://127.0.0.1:3001"

# ===== LOGGING =====
LOG_LEVEL="info"
ENABLE_API_LOGGING=true

# ===== ENCRYPTION INFO =====
# Algorithm: AES-256-CBC
# Encrypted: ${new Date().toISOString()}
# Provider Keys: ${Object.keys(encryptedKeys).join(', ')}
`;
}

/**
 * Verify encrypted keys can be decrypted
 */
async function verifyEncryption(encryptionKey, encryptedKeys) {
    const { decryptAPIKey } = require('./encryption-utils');
    
    console.log('\n🔍 Verifying encryption/decryption...\n');
    
    for (const [provider, encryptedKey] of Object.entries(encryptedKeys)) {
        try {
            const decrypted = decryptAPIKey(encryptedKey, encryptionKey);
            const original = CURRENT_API_KEYS[provider];
            
            if (decrypted === original) {
                console.log(`✅ ${provider.toUpperCase()} - Encryption verified`);
            } else {
                console.error(`❌ ${provider.toUpperCase()} - Decryption mismatch!`);
                return false;
            }
        } catch (error) {
            console.error(`❌ ${provider.toUpperCase()} - Verification failed:`, error.message);
            return false;
        }
    }
    
    console.log('\n✅ All API keys encrypted and verified successfully!\n');
    return true;
}

// Run migration if called directly
if (require.main === module) {
    migrateAPIKeys()
        .then(success => {
            process.exit(success ? 0 : 1);
        })
        .catch(error => {
            console.error('Fatal error:', error);
            process.exit(1);
        });
}

module.exports = { migrateAPIKeys };

